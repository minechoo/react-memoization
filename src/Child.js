import { memo } from 'react';

function Child(props) {
	console.log('child');
	return (
		<div>
			<h1>Child</h1>
		</div>
	);
}

export default memo(Child);

/*
  메모이제이션
  - 특정 값을 강제로 메모리에 할당해서 값을 재활용 (속도가 빨라짐)
  - 메모이제이션을 많이 할수록 메모리점유율을 강제로 늘려서 속도를 증가
  - 자바스크립트엔진은 garbage collection (안쓰는 메모리를 정기적으로 제거해서 메모리 최적화)
  - 메모이제이션된 요소는 가비지 컬렉션에서 제외됨

  부모 컴포넌트가 재호출되면 자식 컴포넌트는 변경되는 내용이 없음에도 불구하고 무조건 재호출 (불필요한 함수 호출 발생)

  memo - 특정 컴포넌트 자체를 메모이제이션해서 부모컴포넌트가 재랜더링 되더라도 자식 컴포넌트를 매번 재랜더링하는 것이 아닌 이전 렌더링된 결과값을 재활용 (불필요한 재랜더링 방지)

  hoc(high order compoent) :함수로 인수로 함수를 전달해서 새로운 함수를 반환하는 형태

  - 자식컴포넌트가 memo로 메모이제이션되었다 하더라도 prop값이 전달되면 memoization이 풀림
  - 자식 요소에 props전달되지 않는 값이 부모 컴포넌트에서 변경되면 그때는 자식컴포넌트의 메모이제이션이 유지됨
*/
